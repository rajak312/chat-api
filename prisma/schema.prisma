generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------- Users & Auth --------------------
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  password    String?
  email       String?  @unique
  phoneNumber String?  @unique
  created_at  DateTime @default(now())

  passkeys          Passkey[]
  WebAuthnChallenge WebAuthnChallenge[]
  Session           Session[]

  online       Boolean       @default(false)
  devices      Device[]
  roomUsers    RoomUser[]
  messagesSent Message[]     @relation("UserSentMessages")
  messagesSeen MessageSeen[]
  connections  Connection[]  @relation("UserConnections")
  connectedBy  Connection[]  @relation("ConnectedUserConnections")
}

// -------------------- Connections --------------------
model Connection {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  connectedUserId String   @db.ObjectId
  createdAt       DateTime @default(now())

  user          User @relation("UserConnections", fields: [userId], references: [id])
  connectedUser User @relation("ConnectedUserConnections", fields: [connectedUserId], references: [id])

  messages Message[]

  @@unique([userId, connectedUserId])
}

// -------------------- Rooms --------------------
model Room {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())

  roomUsers RoomUser[]
  messages  Message[]
}

// -------------------- Conversations --------------------
model Conversation {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      ConversationType
  createdAt DateTime         @default(now())
}

// -------------------- Room Membership --------------------
model RoomUser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId

  // Session-based E2EE fields for rooms
  encryptedRoomKey String?
  keyEnvelopeIV    String?
  keyEnvelopeTag   String?
  keyEnvelopeAlg   String?
  deviceId         String? @db.ObjectId
}

model Device {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())

  // long-term public key (SPKI Base64). Do NOT store plaintext private keys here unless encrypted.
  publicKey String

  enabled Boolean @default(true)

  // relations
  sentMessages     Message[]    @relation("DeviceSentMessages")
  receivedMessages WrappedKey[] // wrapped keys point back to device
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Who sent it
  sender   User   @relation("UserSentMessages", fields: [senderId], references: [id])
  senderId String @db.ObjectId

  // Which device was used to send
  senderDevice   Device @relation("DeviceSentMessages", fields: [senderDeviceId], references: [id])
  senderDeviceId String @db.ObjectId

  // Which recipient device this message record is intended for (optional if you store per-device messages)
  // For fan-out design you may optionally store recipientDeviceId here if you create per-device Message entries.
  // recipientDeviceId String? @db.ObjectId

  // Encrypted content (the AES-GCM ciphertext & iv; we store one ciphertext per logical message)
  ciphertext            String
  iv                    String? // base64 IV (12 bytes)
  authTag               String? // optional; AES-GCM tag is usually appended to ciphertext, not separate
  senderEphemeralPublic String? // optional (for DH flows)
  version               String  @default("v1")
  contentType           String?

  createdAt DateTime      @default(now())
  seenBy    MessageSeen[]

  // Wrapped keys for each recipient device
  wrappedKeys WrappedKey[]

  Connection   Connection? @relation(fields: [connectionId], references: [id])
  connectionId String?     @db.ObjectId
  Room         Room?       @relation(fields: [roomId], references: [id])
  roomId       String?     @db.ObjectId
}

model WrappedKey {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  message      Message  @relation(fields: [messageId], references: [id])
  messageId    String   @db.ObjectId
  device       Device   @relation(fields: [deviceId], references: [id])
  deviceId     String   @db.ObjectId // <-- recipient device id
  encryptedKey String
  createdAt    DateTime @default(now())
}

// -------------------- Message Seen --------------------
model MessageSeen {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.ObjectId
  at        DateTime @default(now())
}

// -------------------- Session Tracking --------------------
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

// -------------------- Passkeys / WebAuthn --------------------
model Passkey {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id])
  webAuthnUserID String    @unique
  publicKey      Bytes
  counter        Int
  transports     String[]
  deviceType     String
  backedUp       Boolean
  createdAt      DateTime  @default(now())
  lastUsed       DateTime?
}

model WebAuthnChallenge {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  challenge String
  type      ChallengeType
  expiresAt DateTime
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ChallengeType {
  REGISTRATION
  AUTHENTICATION
}

enum ConversationType {
  DIRECT
  GROUP
}

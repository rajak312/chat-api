generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------- Devices & Keys --------------------
model Device {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  userId         String          @db.ObjectId
  name           String          @unique
  createdAt      DateTime        @default(now())
  identityKey    String
  signedPreKey   String
  spkSignature   String
  enabled        Boolean         @default(true)
  oneTimePreKeys OneTimePreKey[]
}

model OneTimePreKey {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  device    Device  @relation(fields: [deviceId], references: [id])
  deviceId  String  @db.ObjectId
  keyId     Int
  publicKey String
  consumed  Boolean @default(false)
}

// -------------------- Users & Auth --------------------
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String   @unique
  password    String?
  email       String?  @unique
  phoneNumber String?  @unique
  created_at  DateTime @default(now())

  passkeys          Passkey[]
  WebAuthnChallenge WebAuthnChallenge[]
  Session           Session[]

  online       Boolean       @default(false)
  devices      Device[]
  roomUsers    RoomUser[]
  messagesSent Message[]     @relation("UserSentMessages")
  messagesSeen MessageSeen[]
  connections  Connection[]  @relation("UserConnections")
  connectedBy  Connection[]  @relation("ConnectedUserConnections")
}

// -------------------- Connections --------------------
model Connection {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  connectedUserId String   @db.ObjectId
  createdAt       DateTime @default(now())

  user          User @relation("UserConnections", fields: [userId], references: [id])
  connectedUser User @relation("ConnectedUserConnections", fields: [connectedUserId], references: [id])

  messages Message[]

  @@unique([userId, connectedUserId])
}

// -------------------- Rooms --------------------
model Room {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())

  roomUsers RoomUser[]
  messages  Message[]
}

// -------------------- Room Membership --------------------
model RoomUser {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  room   Room   @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId

  // Session-based E2EE fields for rooms
  encryptedRoomKey String?
  keyEnvelopeIV    String?
  keyEnvelopeTag   String?
  keyEnvelopeAlg   String?
  deviceId         String? @db.ObjectId
}

// -------------------- Messages --------------------
model Message {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  sender   User   @relation("UserSentMessages", fields: [senderId], references: [id])
  senderId String @db.ObjectId

  room   Room?   @relation(fields: [roomId], references: [id])
  roomId String? @db.ObjectId

  connection   Connection? @relation(fields: [connectionId], references: [id])
  connectionId String?     @db.ObjectId

  recipientDeviceId String? @db.ObjectId // <-- NEW

  ciphertext            String
  iv                    String?
  authTag               String?
  senderEphemeralPublic String?
  version               String? @default("v1")
  contentType           String?

  createdAt DateTime      @default(now())
  seenBy    MessageSeen[]
}

// -------------------- Message Seen --------------------
model MessageSeen {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.ObjectId
  at        DateTime @default(now())
}

// -------------------- Session Tracking --------------------
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

// -------------------- Passkeys / WebAuthn --------------------
model Passkey {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  user           User      @relation(fields: [userId], references: [id])
  webAuthnUserID String    @unique
  publicKey      Bytes
  counter        Int
  transports     String[]
  deviceType     String
  backedUp       Boolean
  createdAt      DateTime  @default(now())
  lastUsed       DateTime?
}

model WebAuthnChallenge {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  userId    String        @db.ObjectId
  challenge String
  type      ChallengeType
  expiresAt DateTime
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ChallengeType {
  REGISTRATION
  AUTHENTICATION
}
